{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "ConfigurationReference": "configRef_v123",
    "RequestReference": "SRVREQ01",
    "Prepared": "2021-06-30T03:07:07Z",
    "RunId": "runId098"
  },
  "Outputs": {
    "ecsCapacityProviderAssocXappXecsbase": {
      "Value": {
        "Ref": "ecsCapacityProviderAssocXappXecsbase"
      }
    },
    "Account": {
      "Value": {
        "Ref": "AWS::AccountId"
      }
    },
    "securityGroupXappXecsbase": {
      "Value": {
        "Ref": "securityGroupXappXecsbase"
      }
    },
    "ecsXappXecsbase": {
      "Value": {
        "Ref": "ecsXappXecsbase"
      }
    },
    "ecsXappXecsbaseXarn": {
      "Value": {
        "Fn::GetAtt": [
          "ecsXappXecsbase",
          "Arn"
        ]
      }
    },
    "Region": {
      "Value": {
        "Ref": "AWS::Region"
      }
    },
    "DeploymentMode": {
      "Value": "update"
    },
    "asgXappXecsbase": {
      "Value": {
        "Ref": "asgXappXecsbase"
      }
    },
    "ecsCapacityProviderXappXecsbaseXasg": {
      "Value": {
        "Ref": "ecsCapacityProviderXappXecsbaseXasg"
      }
    },
    "DeploymentUnit": {
      "Value": "aws-ecs-base"
    }
  },
  "Resources": {
    "ecsCapacityProviderAssocXappXecsbase": {
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
      "Properties": {
        "DefaultCapacityProviderStrategy": [
          {
            "CapacityProvider": "##MockOutputXecsCapacityProviderXappXecsbaseXasgX##",
            "Weight": 1,
            "Base": 1
          }
        ],
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT",
          "##MockOutputXecsCapacityProviderXappXecsbaseXasgX##"
        ],
        "Cluster": "##MockOutputXecsXappXecsbaseX##"
      }
    },
    "securityGroupXappXecsbase": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "mockedup-integration-application-ecsbase",
        "VpcId": "##MockOutputXvpcXsegmentXvpcX##",
        "Tags": [
          {
            "Value": "SRVREQ01",
            "Key": "cot:request"
          },
          {
            "Value": "configRef_v123",
            "Key": "cot:configuration"
          },
          {
            "Value": "mockten",
            "Key": "cot:tenant"
          },
          {
            "Value": "mockacct",
            "Key": "cot:account"
          },
          {
            "Value": "mockedup",
            "Key": "cot:product"
          },
          {
            "Value": "integration",
            "Key": "cot:environment"
          },
          {
            "Value": "test",
            "Key": "cot:category"
          },
          {
            "Value": "default",
            "Key": "cot:segment"
          },
          {
            "Value": "application",
            "Key": "cot:tier"
          },
          {
            "Value": "ecsbase",
            "Key": "cot:component"
          },
          {
            "Value": "mockedup-integration-application-ecsbase",
            "Key": "Name"
          }
        ]
      }
    },
    "ecsXappXecsbase": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "Tags": [
          {
            "Value": "SRVREQ01",
            "Key": "cot:request"
          },
          {
            "Value": "configRef_v123",
            "Key": "cot:configuration"
          },
          {
            "Value": "mockten",
            "Key": "cot:tenant"
          },
          {
            "Value": "mockacct",
            "Key": "cot:account"
          },
          {
            "Value": "mockedup",
            "Key": "cot:product"
          },
          {
            "Value": "integration",
            "Key": "cot:environment"
          },
          {
            "Value": "test",
            "Key": "cot:category"
          },
          {
            "Value": "default",
            "Key": "cot:segment"
          },
          {
            "Value": "application",
            "Key": "cot:tier"
          },
          {
            "Value": "ecsbase",
            "Key": "cot:component"
          },
          {
            "Value": "mockedup-integration-application-ecsbase",
            "Key": "Name"
          }
        ]
      }
    },
    "asgXappXecsbase": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinSuccessfulInstancesPercent": 75,
          "MinInstancesInService": 1,
          "PauseTime": "PT10M",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ],
          "WaitOnResourceSignals": true
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "1_SSMAgent": {
            "packages": {
              "yum": {
                "amazon-ssm-agent": []
              }
            },
            "commands": {
              "StartSSMAgent": {
                "ignoreErrors": false,
                "command": "start amazon-ssm-agent || status amazon-ssm-agent"
              }
            }
          },
          "1_AWSClI": {
            "packages": {
              "yum": {
                "aws-cli": []
              }
            }
          },
          "1_OSPatching": {
            "commands": {
              "DailyUpdates": {
                "ignoreErrors": false,
                "command": "echo \"59 13 * * * yum clean all && yum -y update >> /var/log/update.log 2>&1\" >crontab.txt && crontab crontab.txt"
              },
              "InitialUpdate": {
                "ignoreErrors": false,
                "command": "yum clean all && yum -y update"
              }
            }
          },
          "5_ECSAgent": {
            "files": {
              "/etc/ecs/ecs.config": {
                "mode": "000644",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      {
                        "Fn::Sub": [
                          "ECS_CLUSTER=${clusterId}",
                          {
                            "clusterId": "##MockOutputXecsXappXecsbaseX##"
                          }
                        ]
                      },
                      "ECS_LOGLEVEL=warn",
                      "ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=10m",
                      "ECS_AVAILABLE_LOGGING_DRIVERS=[\"awslogs\",\"fluentd\",\"gelf\",\"json-file\",\"journald\",\"syslog\"]"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "docker": {
                  "files": [],
                  "ensureRunning": true,
                  "enabled": true
                }
              }
            },
            "commands": {
              "9_RestartECSAgent": {
                "ignoreErrors": false,
                "command": "stop ecs; start ecs"
              }
            }
          },
          "2_CloudWatchLogs": {
            "files": {
              "/etc/awslogs/awscli.conf": {
                "mode": "000644",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[plugins]",
                      "cwlogs = cwlogs",
                      "[default]",
                      {
                        "Fn::Sub": "region = ${AWS::Region}"
                      }
                    ]
                  ]
                }
              },
              "/etc/awslogs/awslogs.conf": {
                "mode": "000644",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[general]",
                      "state_file = /var/lib/awslogs/agent-state",
                      "",
                      "[/var/log/dmesg]",
                      "file = /var/log/dmesg",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/dmesg",
                      "",
                      "[/var/log/messages]",
                      "file = /var/log/messages",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/messages",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/cron]",
                      "file = /var/log/cron",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/cron",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/update.log]",
                      "file = /var/log/update.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/update.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/cfn-init.log]",
                      "file = /var/log/cfn-init.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/cfn-init.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/cfn-init-cmd.log]",
                      "file = /var/log/cfn-init-cmd.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/cloud-init.log]",
                      "file = /var/log/cloud-init.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/cloud-init.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/cloud-init-output.log]",
                      "file = /var/log/cloud-init-output.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/cloud-init-output.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/amazon/ssm/amazon-ssm-agent.log]",
                      "file = /var/log/amazon/ssm/amazon-ssm-agent.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log",
                      "awslogs-multiline-pattern = ^INFO",
                      "",
                      "[/var/log/secure]",
                      "file = /var/log/secure",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/secure",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/audit/audit.log]",
                      "file = /var/log/audit/audit.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/audit/audit.log",
                      "awslogs-multiline-pattern = ^type",
                      "",
                      "[/var/log/aide/aide.log]",
                      "file = /var/log/aide/aide.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/aide/aide.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/docker]",
                      "file = /var/log/docker",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/docker",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/ecs/ecs-init.log]",
                      "file = /var/log/ecs/ecs-init.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/ecs/ecs-init.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/ecs/ecs-agent.log]",
                      "file = /var/log/ecs/ecs-agent.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/ecs/ecs-agent.log",
                      "datetime_format = %b %d %H:%M:%S",
                      "",
                      "[/var/log/ecs/audit.log]",
                      "file = /var/log/ecs/audit.log",
                      "log_group_name = /mockedup/integration/application/ecsbase/instancelog",
                      "log_stream_name = {instance_id}/var/log/ecs/audit.log",
                      "datetime_format = %b %d %H:%M:%S",
                      ""
                    ]
                  ]
                }
              },
              "/opt/hamlet_cfninit/awslogs.sh": {
                "mode": "000755",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "#!/bin/bash",
                      "# Metadata log details",
                      "ecs_cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')",
                      "ecs_container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )",
                      "macs=$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | head -1 )",
                      "vpc_id=$(curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/$macs/vpc-id )",
                      "instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)",
                      "",
                      "sed -i -e \"s/{instance_id}/$instance_id/g\" /etc/awslogs/awslogs.conf",
                      "sed -i -e \"s/{ecs_container_instance_id}/$ecs_container_instance_id/g\" /etc/awslogs/awslogs.conf",
                      "sed -i -e \"s/{ecs_cluster}/$ecs_cluster/g\" /etc/awslogs/awslogs.conf",
                      "sed -i -e \"s/{vpc_id}/$vpc_id/g\" /etc/awslogs/awslogs.conf"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "files": [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ],
                  "ensureRunning": true,
                  "packages": [
                    "awslogs"
                  ],
                  "enabled": true,
                  "commands": [
                    "ConfigureLogsAgent"
                  ]
                }
              }
            },
            "packages": {
              "yum": {
                "jq": [],
                "awslogs": []
              }
            },
            "commands": {
              "ConfigureLogsAgent": {
                "ignoreErrors": false,
                "command": "/opt/hamlet_cfninit/awslogs.sh"
              }
            }
          },
          "configSets": {
            "asgXappXecsbase": [
              "1_AWSClI",
              "1_OSPatching",
              "1_SSMAgent",
              "2_CloudWatchLogs",
              "2_HamletEnv",
              "5_ECSAgent"
            ],
            "asgXappXecsbase-wait": []
          },
          "2_HamletEnv": {
            "files": {
              "/opt/hamlet_cfninit/set_bash_env.sh": {
                "mode": "000755",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "if [[ $(grep -L \"/opt/hamlet_cfninit/set_env.sh\" /etc/bashrc) ]]; then",
                      "    echo \"source /opt/hamlet_cfninit/set_env.sh\" >> /etc/bashrc",
                      "fi"
                    ]
                  ]
                }
              },
              "/opt/hamlet_cfninit/set_env.sh": {
                "mode": "000755",
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "# hamlet provided env",
                      "export TEMPLATE_TIMESTAMP='2021-06-30T03:07:06Z'",
                      "export PRODUCT='mockedup'",
                      "export ENVIRONMENT='integration'",
                      "export SEGMENT='default'",
                      "export TIER='application'",
                      "export COMPONENT='ecsbase'",
                      "export COMPONENT_INSTANCE=''",
                      "export COMPONENT_VERSION=''",
                      "export REQUEST_REFERENCE='SRVREQ01'",
                      "export CONFIGURATION_REFERENCE='configRef_v123'",
                      "export APPDATA_PREFIX='appdata/mockedup/integration/application/ecsbase'",
                      "export APPSETTINGS_PREFIX='settings/mockedup/integration/application/ecsbase'",
                      "export CREDENTIALS_PREFIX='settings/mockedup/integration/application/ecsbase'",
                      "export SETTINGS_PREFIX='settings/mockedup/integration/application/ecsbase'",
                      "export OPSDATA_BUCKET='##MockOutputXs3XsegmentXoperationsX##'",
                      "export OPSDATA_NAME='##MockOutputXs3XsegmentXoperationsX##'",
                      "export OPSDATA_ARN='arn:aws:iam::123456789012:mock/s3XsegmentXoperationsXarn'",
                      "export OPSDATA_REGION='ap-mock-1'",
                      "export OPSDATA_FQDN='##MockOutputXs3XsegmentXoperationsXdnsX##'",
                      "export APPDATA_BUCKET='##MockOutputXs3XsegmentXapplicationX##'",
                      "export APPDATA_NAME='##MockOutputXs3XsegmentXapplicationX##'",
                      "export APPDATA_ARN='arn:aws:iam::123456789012:mock/s3XsegmentXapplicationXarn'",
                      "export APPDATA_REGION='ap-mock-1'",
                      "export APPDATA_FQDN='##MockOutputXs3XsegmentXapplicationXdnsX##'",
                      "export ENCRYPTION_ID='##MockOutputXcmkXsegmentXcmkX##'",
                      "export ENCRYPTION_ARN='arn:aws:iam::123456789012:mock/cmkXsegmentXcmkXarn'",
                      "export BUILD_UNIT='aws-ecs-base'",
                      "export RUN_ID='runId098'",
                      "export hamlet_request='SRVREQ01'",
                      "export hamlet_configuration='configRef_v123'",
                      "export hamlet_accountRegion='ap-southeast-2'",
                      "export hamlet_tenant='mockten'",
                      "export hamlet_account='mockacct'",
                      "export hamlet_product='mockedup'",
                      "export hamlet_region='ap-southeast-2'",
                      "export hamlet_segment='default'",
                      "export hamlet_environment='int'",
                      "export hamlet_tier='app'",
                      "export hamlet_component='ecsbase'",
                      "export hamlet_credentials='##MockOutputXs3XaccountXcredentialsX##'",
                      "export hamlet_code='##MockOutputXs3XaccountXcodeX##'",
                      "export hamlet_logs='##MockOutputXs3XsegmentXoperationsX##'",
                      "export hamlet_backups='##MockOutputXs3XsegmentXapplicationX##'",
                      ""
                    ]
                  ]
                }
              }
            },
            "commands": {
              "01Directories": {
                "ignoreErrors": false,
                "command": "mkdir --parents --mode=0755 /var/log/codeontap"
              },
              "02SetBashEnv": {
                "ignoreErrors": false,
                "command": "/opt/hamlet_cfninit/set_bash_env.sh"
              }
            }
          }
        }
      },
      "Properties": {
        "LifecycleHookSpecificationList": [
          {
            "LifecycleHookName": "asgXappXecsbase",
            "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
            "HeartbeatTimeout": 600,
            "DefaultResult": "ABANDON"
          }
        ],
        "MinSize": "1",
        "LaunchConfigurationName": "##MockOutputXlaunchConfigXappXecsbaseX##",
        "Cooldown": "30",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "DesiredCapacity": "1",
        "VPCZoneIdentifier": [
          "##MockOutputXsubnetXappXaX##"
        ],
        "MaxSize": "2",
        "Tags": [
          {
            "Value": "SRVREQ01",
            "Key": "cot:request",
            "PropagateAtLaunch": true
          },
          {
            "Value": "configRef_v123",
            "Key": "cot:configuration",
            "PropagateAtLaunch": true
          },
          {
            "Value": "mockten",
            "Key": "cot:tenant",
            "PropagateAtLaunch": true
          },
          {
            "Value": "mockacct",
            "Key": "cot:account",
            "PropagateAtLaunch": true
          },
          {
            "Value": "mockedup",
            "Key": "cot:product",
            "PropagateAtLaunch": true
          },
          {
            "Value": "integration",
            "Key": "cot:environment",
            "PropagateAtLaunch": true
          },
          {
            "Value": "test",
            "Key": "cot:category",
            "PropagateAtLaunch": true
          },
          {
            "Value": "default",
            "Key": "cot:segment",
            "PropagateAtLaunch": true
          },
          {
            "Value": "application",
            "Key": "cot:tier",
            "PropagateAtLaunch": true
          },
          {
            "Value": "ecsbase",
            "Key": "cot:component",
            "PropagateAtLaunch": true
          },
          {
            "Value": "mockedup-integration-application-ecsbase",
            "Key": "Name",
            "PropagateAtLaunch": true
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": 1
        }
      }
    },
    "ingressXsecurityGroupXappXecsbaseXsshXsecurityGroupXmgmtXssh": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": 22,
        "Description": "mockedup-integration-management-ssh",
        "ToPort": 22,
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": "##MockOutputXsecurityGroupXmgmtXsshX##",
        "GroupId": "##MockOutputXsecurityGroupXappXecsbaseX##"
      }
    },
    "instanceProfileXappXecsbase": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          "##MockOutputXroleXappXecsbaseX##"
        ]
      }
    },
    "launchConfigXappXecsbase": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": "##MockOutputXkeypairXsegmentXnameX##",
        "SecurityGroups": [
          "##MockOutputXsecurityGroupXappXecsbaseX##",
          "##MockOutputXsecurityGroupXnatX##"
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "set -uo pipefail",
                "exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1",
                "# Update cfn bootstrap commands",
                "yum install -y aws-cfn-bootstrap",
                "# Create staging dirs for cfninit scripts",
                "mkdir -p /var/log/hamlet_cfninit/",
                "mkdir -p /opt/hamlet_cfninit/",
                "# Remainder of configuration via metadata",
                {
                  "Fn::Sub": [
                    "/opt/aws/bin/cfn-init -v --stack ${StackName} --resource ${Resource} --region ${Region} --configset ${ConfigSet}",
                    {
                      "Resource": "asgXappXecsbase",
                      "Region": {
                        "Ref": "AWS::Region"
                      },
                      "StackName": {
                        "Ref": "AWS::StackName"
                      },
                      "ConfigSet": "asgXappXecsbase"
                    }
                  ]
                },
                "init_status=$?",
                "# Signal the status from cfn-init",
                {
                  "Fn::Sub": [
                    "/opt/aws/bin/cfn-signal -e ${!init_status} --stack ${StackName} --resource ${Resource} --region ${Region}",
                    {
                      "Resource": "asgXappXecsbase",
                      "Region": {
                        "Ref": "AWS::Region"
                      },
                      "StackName": {
                        "Ref": "AWS::StackName"
                      }
                    }
                  ]
                },
                "# Signal the status to the ASG",
                "instance_id=\"$(curl http://169.254.169.254/latest/meta-data/instance-id)\"",
                {
                  "Fn::Sub": [
                    "asg_name=\"$(aws --region ${Region} autoscaling describe-auto-scaling-instances --instance-ids \"${!instance_id}\" --query \"AutoScalingInstances[0].AutoScalingGroupName\" --output text)\"",
                    {
                      "Region": {
                        "Ref": "AWS::Region"
                      }
                    }
                  ]
                },
                "if [[ \"${init_status}\" == \"0\" ]]; then",
                "   echo \"init process successful\"",
                "   asg_result=\"CONTINUE\"",
                "else",
                "   echo \"init process failed\"",
                "   asg_result=\"ABANDON\"",
                "fi",
                {
                  "Fn::Sub": [
                    "aws --region ${Region} autoscaling complete-lifecycle-action  --lifecycle-hook-name ${HookName} --auto-scaling-group-name ${!asg_name} --instance-id ${!instance_id} --lifecycle-action-result ${!asg_result}",
                    {
                      "HookName": "asgXappXecsbase",
                      "Region": {
                        "Ref": "AWS::Region"
                      }
                    }
                  ]
                }
              ]
            ]
          }
        },
        "ImageId": "ami-05a55a4772f315410",
        "BlockDeviceMappings": [
          {
            "Ebs": {
              "VolumeType": "gp2",
              "Encrypted": false,
              "VolumeSize": 50,
              "DeleteOnTermination": true
            },
            "DeviceName": "/dev/xvdcz"
          },
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdc"
          },
          {
            "VirtualName": "ephemeral1",
            "DeviceName": "/dev/sdt"
          }
        ],
        "IamInstanceProfile": "##MockOutputXinstanceProfileXappXecsbaseX##",
        "InstanceType": "t2.medium",
        "AssociatePublicIpAddress": false
      }
    },
    "ecsCapacityProviderXappXecsbaseXasg": {
      "Type": "AWS::ECS::CapacityProvider",
      "Properties": {
        "AutoScalingGroupProvider": {
          "ManagedScaling": {
            "Status": "DISABLED"
          },
          "AutoScalingGroupArn": "##MockOutputXasgXappXecsbaseX##",
          "ManagedTerminationProtection": "DISABLED"
        },
        "Tags": [
          {
            "Value": "SRVREQ01",
            "Key": "cot:request"
          },
          {
            "Value": "configRef_v123",
            "Key": "cot:configuration"
          },
          {
            "Value": "mockten",
            "Key": "cot:tenant"
          },
          {
            "Value": "mockacct",
            "Key": "cot:account"
          },
          {
            "Value": "mockedup",
            "Key": "cot:product"
          },
          {
            "Value": "integration",
            "Key": "cot:environment"
          },
          {
            "Value": "test",
            "Key": "cot:category"
          },
          {
            "Value": "default",
            "Key": "cot:segment"
          },
          {
            "Value": "application",
            "Key": "cot:tier"
          },
          {
            "Value": "ecsbase",
            "Key": "cot:component"
          },
          {
            "Value": "mockedup-integration-application-ecsbase",
            "Key": "Name"
          }
        ]
      }
    }
  }
}
