name: package

on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:

  # Run a nightly update to get the latest packages
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * *

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Nightly deployment details
        id: nightly_deployment
        if: ${{ github.event_name == 'schedule' }}
        with:
          initial_status: "in_progress"
          token: "${{ github.token }}"
          environment: nightly

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install
        run: |
          pip install -q hamlet

      - id: pick_engine
        name: Pick Engine
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo ::set-output name=engine::hamlet_train_release
          else
            echo ::set-output name=engine::hamlet_tram_release
          fi

      - name: Run Tests
        env:
          TEST_OUTPUT_DIR: ${{ github.workspace }}/hamlet_tests
        run: |
          ./test.sh "${{steps.pick_engine.outputs.engine}}"

      - name: Shared Plugin Results
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: 'hamlet_tests/shared/junit.xml'
          fail_on_failure: true
          require_tests: true
          check_name: Shared Plugin Results

      - name: AWS Plugin Results
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: 'hamlet_tests/aws/junit.xml'
          fail_on_failure: true
          require_tests: true
          check_name: AWS Plugin Results

      - name: Azure Plugin Results
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: 'hamlet_tests/azure/junit.xml'
          fail_on_failure: true
          require_tests: true
          check_name: Azure Plugin Results

      - name: docker meta details
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{github.repository}}
          flavor: |
            latest=auto
          tags: |
            type=edge,branch=main
            type=semver,pattern={{version}}
            type=schedule,pattern=nightly
            type=schedule,pattern=schedule-{{date 'YYYYMMDD'}}
            type=sha

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Nightly
        uses: docker/build-push-action@v2
        if: steps.pick_engine.outputs.engine == 'hamlet_tram_release'
        with:
          push: ${{ github.event_name == 'schedule'  || github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: tram_package
          build-args: |
            engine=${{steps.pick_engine.outputs.engine}}

      - name: Push Release
        uses: docker/build-push-action@v2
        if: steps.pick_engine.outputs.engine != 'hamlet_tram_release'
        with:
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: train_package
          build-args: |
            engine=${{steps.pick_engine.outputs.engine}}

      - name: Nightly deployment status (success)
        if: ${{ github.event_name == 'schedule' && success() }}
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "success"
          deployment_id: ${{ steps.nightly_deployment.outputs.deployment_id }}

      - name: Nightly deployment status (failure)
        if: ${{ github.event_name == 'schedule' && failure() }}
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "failure"
          deployment_id: ${{ steps.nightly_deployment.outputs.deployment_id }}
